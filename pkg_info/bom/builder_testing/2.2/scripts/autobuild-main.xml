<?xml version="1.0" encoding="UTF-8"?>

<project name="builder-core">

    <!--
    DO NOT EDIT THIS FILE.
    This is common infrastructure.  If you need changes, request them.
    If you change it yourself, you own it.  Don't ask anyone for help.
    Don't expect release to help; don't expect builder developers to help.
    Use the (many!) hooks to customize behavior, or request more, or budget
    the time and energy to handle all maintenance, support, and development
    on your own team, including time to train release engineers.
    The same applies to other files found in this directory.  Customize
    in the *-overrides.xml files.  Expect sarcastic laughter if you ignore this.
    -->

    <!-- IMPORTS
         This section imports the various property overrides.  It
         happens *before* the defaults are set for good reason. -->
    <import file="${autobuild.dir.scripts}/private/workspace-load.xml" />
    <import file="${autobuild.dir.archivist.root}/build.xml" />
    <import file="${autobuild.dir.findbugs.root}/build.xml" />
    <import file="${autobuild.dir.updater.root}/build.xml" />
    <import file="${autobuild.dir.installzipassembly.root}/build.xml" />

    <!-- default username for various purposes, most importantly developer build qualifiers -->
    <property name="autobuild.user.name" value="${user.name}"/>

    <!-- per-user-per-release-unit overrides.  not often used. -->
    <property name="autobuild.user-release-unit.overrides" location="${autobuild.dir.release-unit}/${autobuild.user.name}.xml" />
    <available file="${autobuild.user-release-unit.overrides}" property="_user_release_unit_overrides_exists" />
    <import file="${autobuild.user-release-unit.overrides}" optional="true" />

    <!-- per-release-unit overrides. useful for everybody. -->
    <property name="autobuild.release-unit.overrides" value="build-overrides.xml" />
    <import file="${autobuild.dir.release-unit}/${autobuild.release-unit.overrides}" optional="true" />

    <!-- automated tagging; exists after a release build (only) -->
    <import file="${autobuild.dir.scripts}/private/tag-promote.xml" />
    <import file="${autobuild.dir.scripts}/private/release-substitutions.xml" />

    <!-- build the design time RU -->
    <import file="${autobuild.dir.scripts}/private/build-design-release-unit.xml" />

    <!-- post-build automation support; exist after a developer build (only) -->
    <property name="autobuild.dir.build-artifacts" location="${autobuild.dir.release-unit}/build-artifacts" />
    <property name="latest-build-file" location="${autobuild.dir.build-artifacts}/latest-build.xml" />
    <property name="latest-source-location-property" value="autobuild.build.latest.extension-location" />
    <property name="autobuild.build.latest.artifacts-file" location="${autobuild.dir.build-artifacts}/artifacts-list.xml" />
    <import file="${autobuild.dir.scripts}/private/post-build.xml" />

    <!-- extension targets; prebuild.xml is invoked prior to build; postbuild invoked
         after (unconditionally except on the existence of the script); targets define
         callable targets that execute in the post-build (typically developer) context -->
    <available file="${autobuild.dir.release-unit}/prebuild.xml" property="_prebuild_target_exists" />
    <available file="${autobuild.dir.release-unit}/postbuild.xml" property="_postbuild_target_exists" />
    <import file="${autobuild.dir.release-unit}/targets.xml" optional="true" />
    <!-- note whether targets exists with an available task? -->

    <!-- imports -->
    <import file="${autobuild.dir.scripts}/private/autobuild-common.xml" />

    <import file="${autobuild.dir.scripts}/private/archivist-diff.xml" />

    <import file="${autobuild.dir.scripts}/private/zipassembly-package.xml" />

    <import file="${autobuild.dir.scripts}/private/antrunner-macrodef.xml" />

    <import file="${autobuild.dir.scripts}/private/dependencies.xml" />

    <import file="${autobuild.dir.scripts}/private/doc-robber.xml" />

    <import file="${autobuild.dir.scripts}/private/load-generators.xml" optional="true" />

    <import file="${autobuild.dir.scripts}/private/merge-release-units.xml" />

    <!-- PROPERTY DEFAULTS
         This section sets defaults for various properties.  If you
         need to override them, do it elsewhere, not here. -->
    <target name="-set-build-properties" depends="-set-timestamp, -set-pdehost, -set-express-build-properties">
        <available property="_user_overrides_present" file="${autobuild.user.overrides}" type="file" />
        <available property="_builder_overrides_present" file="${autobuild.builder.overrides}" type="file" />

        <condition property="_builder_is_configured">
            <and>
                <isset property="_user_overrides_present" />
                <isset property="_builder_overrides_present" />
            </and>
        </condition>

        <condition property="_has_tag_pattern">
            <isset property="autobuild.svn.tag-pattern" />
        </condition>

        <condition property="_need_check_tag_pattern">
            <and>
                <isset property="_has_tag_pattern" />
                <isset property="release-unit" />
                <isset property="official-release-build" />
            </and>
        </condition>
        
        <condition property="_bypass_validate_manifest">
            <istrue value="${autobuild.validation.bypass}" />
        </condition>
        
        <!-- subversion tag location  and structure defaults -->
        <property name="autobuild.svn.tagname-base" value="${release-unit}" />
        <property name="autobuild.svn.tag-pattern" value="${release-unit}" />
        <property name="autobuild.svn.tags-prefix" value="" />
        <property name="autobuild.svn.tags-suffix" value="" />

        <!-- force the property to always be set (with else), and allow setting from the command line as well -->
        <condition property="autobuild.build-latest"
                   else="false">
            <isset property="latest" />
        </condition>
        <condition property="_build_variant_text" value="latest" else="lblm">
            <istrue value="${autobuild.build-latest}" />
        </condition>

        <!-- directories of various sorts -->
        <property name="autobuild.dir.release-unit.configuration" value="${autobuild.dir.user}/configurations/${_build_variant_text}/${autobuild.repository}${autobuild.svn.tags-prefix}${autobuild.svn.tags-suffix}/${release-unit}" />
        <property name="autobuild.workspace.feature-order-output" location="${autobuild.dir.release-unit}/${release-unit}-feature-list.xml" />

        <!-- synchronized with workspace installer -->
        <property name="autobuild.dir.eclipse.config" location="${autobuild.dir.release-unit.configuration}/configuration"/>
        <property name="autobuild.dir.eclipse.extensions" location="${autobuild.dir.release-unit.configuration}/extensionLoc/eclipse"/>

        <!-- used for a "workspace" in antrunner -->
        <property name="autobuild.dir.temp" location="/tmp/${autobuild.user.name}/autobuild"/>

        <!-- max memory size used in antrunner -->
        <property name="autobuild.max.memory" value="512m"/>
        <property name="autobuild.perm.size" value="64m"/>
        <property name="autobuild.max.perm.size" value="128m"/>

        <!-- allow binary cycles dependence -->
        <property name="allow.binary.cycles" value="false"/>

        <!-- obfuscation-related -->
        <!-- valid values are public protected-export protected-impl package none -->
        <property name="autobuild.obfuscator.style" value="protected-export" />
        <!-- valid values are yguard2, proguard -->
        <!-- since the yguard2 latest version 2.5.4 should work with the java 1.8 yet,-->
        <!-- the yguar will be the default type again.-->
        <property name="autobuild.obfuscator.type" value="yguard2" />
        <!--condition property="autobuild.obfuscator.type" value="proguard" else="yguard2">
            <istrue value="${autobuild.jdk.force-18}" />
        </condition-->

        <!-- bypass substitutions in a release build if there are build number overrides,
             or if obfuscation is disabled (in the latter case it's pointless; in the
             former we have no idea what the actual build numbers are and can't identify
             continuations reliably) -->
        <condition property="autobuild.release.substitutions-bypass">
            <available file="${autobuild.dir.release-unit}/pluginVersions.properties" type="file" />
        </condition>

        <!-- compiler defaults, defined by *eclipse* -->
        <property name="javacVerbose" value="false" />
        <property name="javacDebugInfo" value="true" />
        <property name="javacFailOnError" value="true" />
        <property name="javacSource" value="1.5" />
        <property name="javacTarget" value="1.5" />
        <condition property="compilerArg" value="-Xlint" else="-nowarn">
            <istrue value="${autobuild.compiling.log}" />
        </condition>

        <!-- logging and messages -->
        <property name="autobuild.loglevel" value="verbose" />
        <property name="autobuild.log.console" value="" />
        <property name="autobuild.clean" value="-clean" />
        <property name="autobuild.antrunner.arguments" value="" />

        <!-- temporary, while doing generator refactoring -->
        <property name="autobuild.builder.generator.new" value="true" />

        <path id="autobuild.workspace.path.search.features">
            <pathelement path="." />
        </path>

        <property name="autobuild.purge.unit" value="week" />
    </target>

    <target name="-set-express-build-properties" if="express-build">
		<var name="autobuild.obfuscator.style" unset="true"/>
		<var name="integration-build" unset="true"/>
		<var name="official-release-build" unset="true"/>
		<property name="autobuild.obfuscator.style" value="none" />
		<property name="autobuild.log-compression.disable" value="true" />
    </target>

    <!-- PUBLIC TARGETS (called from build.xml boilerplate)
         build: build a release unit
         gather-dependencies: run workspace installer for this release unit
         remove-configuration: remove the stuff created by workspace installer
         properties: spew properties as they will be used at build time
         clean: clean up leftovers, as necessary -->

    <target name="check.version.conformance" description="Checks the current release unit for conformance to versioning best practices based on GA sites."
        depends="-set-workspace-properties, -set-and-spin, -set-build-properties, -which-features-are-needed" unless="express-build">

        <!-- verify that the release unit follows versioning best practices -->
        <property name="autobuild.enforce.versions" value="true" />
        <check.version.conformance
            caching="${autobuild.workspace.cache-choice}"
            localsitecache="${autobuild.workspace.local-cache}" failonmatch="${autobuild.enforce.versions}" failonskip="false"
            errormessage="
&#xa;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
&#xa;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
&#xa;
&#xa;WARNING!!! SEE ABOVE MESSAGES.  
&#xa;This release unit may be violating versioning best practices.
&#xa;For more details, please see
&#xa;  http://wiki.tibco.com/FrameworksWiki/BuildTools/VersionConformance
&#xa;
&#xa;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
&#xa;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++">

            <features refid="gather-dependencies.features.id" />
            
            <updatesites>
                <updatesite url="${_spin_url}/GA/release/site.xml" />
                <updatesite url="${_spin_url}/GA/thirdparty/site.xml" />
                <updatesite url="${_spin_url}/GA/devtools/site.xml" />
            </updatesites>
        
        </check.version.conformance>
        
    </target>
    
    <target name="build" depends="-pre-custom-actions, download-release-units, generate-feature-xml, 
                                  -check-properties, -display-parameters, -copy-user-ru-overrides,
                                  -check-configuration, gather-dependencies, -collect-dependencies-site-xml,
                                  -set-generic-properties, -collect-logs, -acquire-doc-plugins, -prebuild,
                                  -do-ant-runner, -generate-sites, -relocate-fixed-release, -write-last-build-succeeded,
                                  -postbuild, -decease-doc-plugins, -merge-release-units, perform-substitutions-wrapper, 
                                  -build-design-release-unit, -generate-release-build-list, -check-plugin-unpacked,
                                  -merge-site-provenance-xml, 
                                  -dual-build-autorun, archivist-diff, -zip-assembly-package, check.version.conformance,
                                  -generate-p2-jars, -sign-jars, -acquire-buildno, -post-custom-actions"
            description="Build this release unit.">
        <echo>
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

COMPLETED

   version info:
   ${all_version_info}
   
   ${autobuild.repository}/${release-unit}

   ${feature}

   release update site:
   ${autobuild.dir.output.jars.release}

   debug update site:
   ${autobuild.dir.output.jars.debug}

   Build started: ${display.time}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        </echo>
   </target>

    <!-- disabled if official-release-build is true.  release should never generate code -->
    <target name="generate-devdocs" unless="official-release-build"
            depends="-check-properties, -display-parameters, -load-generator-tasks"
            description="Generate a .devdocs feature if the code feature exists.">
        <devtools.generator.docfeature releaseunitlocation="${autobuild.dir.release-unit}" />
    </target>

    <target name="generate-source" unless="official-release-build"
            depends="-check-properties, -display-parameters, -load-generator-tasks"
            description="Generate a .source feature if the code feature exists.">
        <devtools.generator.srcfeature releaseunitlocation="${autobuild.dir.release-unit}" />
    </target>

    <target name="generate-test" unless="official-release-build"
            depends="-check-properties, -display-parameters, -load-generator-tasks"
            description="Generate a .test feature if the code feature exists.">
        <devtools.generator.testfeature releaseunitlocation="${autobuild.dir.release-unit}" />
    </target>

    <target name="properties" depends="-load-ant-contrib, -set-build-properties, -switch-jdk-version, -set-bootclasspath, -check-configuration, -set-generic-properties"
            description="Display properties (used for debugging builder).">
        <trycatch property="_properties_runner_failure">
            <try>
                <tempfile property="_properties.antrunner.temp.file" />
                <echoproperties destfile="${_properties.antrunner.temp.file}" />
                <autobuild.antrunner buildFile="${autobuild.dir.scripts}/build-release-unit.xml"
                                     propertyFile="${_properties.antrunner.temp.file}" antArguments="properties" />
                <delete file="${_properties.antrunner.temp.file}" quiet="true"/>
            </try>
            <catch>
                <echo>Properties invocation failed: ${_properties_runner_failure}</echo>
                <echo>Dumping partial property sets:</echo>
                <echoproperties prefix="user." />
                <echoproperties prefix="autobuild." />
                <echoproperties>
                    <propertyset>
                        <propertyref name="release-unit" />
                        <propertyref name="feature" />
                        <propertyref name="basedir" />
                        <propertyref name="official-release-build" />
                    </propertyset>
                </echoproperties>
            </catch>
        </trycatch>
    </target>

    <target name="classpaths"
            depends="-check-properties, -check-configuration, gather-dependencies"
            description="Generate classpaths for import into custom ant scripts.">
        <condition property="_latest_succeeded">
            <istrue value="${autobuild.build.latest.success}" />
        </condition>
        <fail unless="_latest_succeeded">
The latest build apparently did not succeed.  Classpaths can't be generated.</fail>
        <var name="touch.time" value="${autobuild.build.latest.timestamp}" />
        <antcall target="-classpaths" />
    </target>

    <target name="clean"
            depends="-check-properties, -display-parameters"
            description="Clean up build artifacts.">
        <trycatch property="_clean_errors">
            <try>
                <ant antfile="build.xml" target="clean"
                     dir="${autobuild.dir.release-unit}/features/${feature}" />
                <ant antfile="assemble.xml" target="clean" dir="${autobuild.dir.release-unit}/" />
            </try>
            <catch>
                <echo level="verbose">Caught a problem running the "clean" target:</echo>
                <echo level="verbose">${_clean_errors}</echo>
                <echo level="verbose">Ignoring it.</echo>
            </catch>
            <finally>
                <delete quiet="true">
                    <!-- none of these should exist, except *Versions.properties and the build scripts, after a successful build. -->
                     <fileset dir="${autobuild.dir.release-unit}" includes="*Versions.properties" />
                     <fileset dir="${autobuild.dir.release-unit}" includes="null*" />
                     <fileset dir="${autobuild.dir.release-unit}" includes="*.log" />
                     <fileset file="${autobuild.dir.release-unit}/features/${feature}/build.xml" />
                     <fileset file="${autobuild.dir.release-unit}/assemble.xml" />
                     <fileset file="${autobuild.dir.release-unit}/obfuscation.xml" />
                     <fileset file="${autobuild.dir.release-unit}/pubdiff.txt" />
                     <fileset file="${autobuild.dir.release-unit}/pubdiff_docs.txt" />
                     <fileset file="${autobuild.dir.release-unit}/archivist.txt" />
                     <fileset file="${autobuild.dir.release-unit}/archivist-modify.txt" />
                     <fileset file="${autobuild.dir.release-unit}/svn-externals.txt" />
                     <fileset file="${autobuild.dir.release-unit}/registry_file.xml" />
                     
                     <!--fileset file="${autobuild.dir.release-unit}/rawdiff.txt" /-->
                </delete>
            </finally>
        </trycatch>
    </target>

    <target name="bin-clean" depends="clean"
            description="Tries to cleanup binaries and build-related stuff in the source tree.">
        <delete includeemptydirs="true" quiet="true">
            <fileset dir="${autobuild.dir.release-unit}" defaultexcludes="false">
                <exclude name="build.xml" />
                <include name="**/build.xml" />
                <include name="**/javaCompiler...args" />
                <include name="**/bin/**" />
                <include name="**/temp.folder/**" />
                <include name="**/@dot/**" />
            </fileset>
        </delete>
    </target>

    <target name="veryclean" depends="conf-clean" />
    <target name="very-clean" depends="conf-clean" />

    <target name="conf-clean" depends="clean, remove-configuration, -copy-user-ru-overrides"
            description="Use with caution!  Tries to clean the release unit build and remove the configuration extension location of the release unit.">
        <delete quiet="true" includeemptydirs="true">
            <fileset file="${autobuild.workspace.feature-order-output}" />
            <fileset dir="${autobuild.dir.release-unit}" includes="*-tests.xml" />
            <fileset dir="${autobuild.dir.release-unit}" includes="*-classpaths.xml" />
            <fileset dir="${javadoc.destination}" includes="**/*" />
        </delete>
        <delete dir="${autobuild.dir.build-artifacts}" quiet="true"/>
        <delete dir="${autobuild.dir.release-unit}/dual-build" quiet="true"/> 
        <delete file="${autobuild.dir.release-unit}/output.txt" quiet="true"/> 
        <delete file="${autobuild.dir.release-unit}/findbugs.html" quiet="true"/> 
        <delete file="${autobuild.dir.release-unit}/remove_list.txt" quiet="true"/> 

        <delete dir="${autobuild.dir.release-unit}/download" quiet="true"/>
        <if>
            <istrue value="${_it_is_meregeru}"/>
            <then>
                <delete file="${autobuild.dir.release-unit}/features/${feature}/feature.xml" quiet="true" />
            </then>
        </if>
        
        <if>
            <available file="${sources.destination}"/>
            <then>
                <for param="each-src">
                    <dirset dir="${sources.destination}">
                        <include name="com.tibco.*" />
                    </dirset>
                    <sequential>
                        <delete dir="@{each-src}" quiet="true"/> 
                    </sequential>
                </for>
            </then>
         </if>
    </target>

    <target name="usage" depends="Usage" />
    <target name="Usage"
            description="Display a usage message.">
        <echo>Important targets include:</echo>
        <echo>[default] build: build the release unit.</echo>
        <echo>clean: clean the release unit build.</echo>
        <echo>conf-clean: clean and remove-configuration</echo>
        <echo>gather-dependencies: collect the features/plugins required to build.</echo>
        <echo>remove-configuration: remove the collected dependencies.</echo>
        <echo>properties: mostly used for debugging.</echo>
        <echo></echo>
        <echo>For more information, see:</echo>
        <echo>     http://wiki.tibco.com/FrameworksWiki/BuildTools</echo>
        <echo></echo>
        <echo>For the special property settings, see:</echo>
        <echo>     http://wiki.tibco.com/FrameworksWiki/BuildTools/Customization/ProjectOverrides</echo>
        <echo>     http://wiki.tibco.com/FrameworksWiki/BuildTools/Customization/UserOverrides</echo>
        <echo></echo>
        <echo>For searching the release-units builds, see:</echo>
        <echo>     http://ruready.na.tibco.com</echo>
        <echo> OR  http://lattice.na.tibco.com</echo>
        <echo></echo>
        <echo>For more information on the TT(TIBCO Tools), see:</echo>
        <echo>     http://wiki.tibco.com/DataIntWiki/TT%20Tools</echo>
        <echo></echo>
        <echo>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</echo>
        <echo>Run "ant -projecthelp" to display all the important targets of the builder.</echo>
        <echo>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</echo>
        <echo></echo>
    </target>

    <target name="tool-versions"
            description="Display builder version information."
            depends="-set-build-properties, -check-eclipse, -switch-jdk-version">
        <condition property="_e_version" value="${autobuild.version.eclipse}"
                   else="4.11.x (default)">
            <isset property="autobuild.version.eclipse" />
        </condition>
        <echo>Boilerplate version: ${autobuild.boilerplate.version}</echo>
        <echo>Builder version: ${autobuild.version.builder}</echo>
        <echo>Workspace Installer version: ${autobuild.version.workspace}</echo>
        <echo>Builder root location: ${autobuild.dir.builder.root}</echo>
        <echo>Eclipse version: ${_e_version}</echo>
        <echo>Eclipse location: ${autobuild.dir.eclipse.install}</echo>
        <echo>Java location: ${_dir.java-classes}</echo>
    </target>

    <target name="purge-candidates" depends="-check-properties, -display-parameters"
            description="Remove builds more than one ${autobuild.purge.unit} (week) old." unless="official-release-build" >
        <!-- defined this way to allow users to override it -->
        <if>
            <istrue value="${purge.keep.latest}" />
            <then>
                <purge.build dir="${autobuild.dir.candidates}" />
            </then>
        <else>	
            <tstamp>
                <format property="_one_week_ago"
                        pattern="MM/dd/yyyy hh:mm aa"
                        unit="${autobuild.purge.unit}"
					    locale="en"
                        offset="-1" />
            </tstamp>
            <echo>Deleting candidates older than: ${_one_week_ago}</echo>
            <delete failonerror="false" includeemptydirs="true" verbose="true">
                <fileset dir="${autobuild.dir.candidates}">
                    <date datetime="${_one_week_ago}" when="before" />
                </fileset>
            </delete>
        </else>
        </if>
    </target>

    <target name="purge-builds" depends="-check-properties, -set-workspace-properties, -display-parameters"
            description="Remove builds from the local update site(debug) more than one ${autobuild.purge.unit} (week) old.">
        <if>
            <istrue value="${purge.keep.latest}" />
            <then>
                <purge.build dir="${autobuild.workspace.update-sites.local}" isBuildSite="true" />
                <purge.build dir="${autobuild.workspace.update-sites.local-debug}" isBuildSite="true" />
            </then>
        <else>
            <tstamp>
            <format property="_one_week_ago"
                    pattern="MM/dd/yyyy hh:mm aa"
                    unit="${autobuild.purge.unit}"
                    locale="en"
                    offset="-1" />
            </tstamp>
            <echo>Deleting builds older than: ${_one_week_ago}</echo>
            <delete failonerror="false" verbose="true">
                 <fileset dir="${autobuild.workspace.update-sites.local}">
                     <date datetime="${_one_week_ago}" when="before" />
                 </fileset>
            </delete>
            <delete failonerror="false" verbose="true">
                <fileset dir="${autobuild.workspace.update-sites.local-debug}">
                    <date datetime="${_one_week_ago}" when="before" />
                </fileset>
            </delete>
        </else>
        </if>
        <update-local-builds-site-xml />
    </target>

    <target name="nuke" unless="official-release-build"
            depends="-check-properties">
        <fail unless="from-orbit">.

Are you *SURE* you want to do this?

The "nuke" target will delete all sorts of often-useful material, including the
configuration and candidate directories for *all* release units, and the cache
of downloaded features and plugins.  If this is the only way to be sure, then
nuke it from orbit (ant -Dfrom-orbit=true nuke).</fail>
        <antcall target="conf-clean" />
        <delete failonerror="false" includeemptydirs="true" verbose="true">
            <fileset dir="${autobuild.dir.candidates}" />
            <fileset dir="${autobuild.dir.user}/configurations" />
            <fileset dir="${autobuild.dir.user}/workspaceInstaller" />
        </delete>
    </target>

    <target name="test" if="_run_test"
            depends="-check-properties, -check-release-build, -check-successful-build, -check-tests"
            description="Run automated tests after a successful (non-release) build.">
        <ant antfile="${autobuild.dir.build-artifacts}/tests.xml" />
    </target>

    <target name="test-prep"
            depends="-check-properties, gather-dependencies, -set-qa-output-location,
                     -set-generic-properties, -set-role-dependent-properties"
            description="Set up unit tests for official release builds (QA use).">

        <!-- make sure that this exists (needed at later points) -->
        <mkdir dir="${autobuild.dir.build-artifacts}" />

        <!-- tests.properties allows someone to override.  specify
             at least autobuild.qa.code, autobuild.qa.test, and/
             autobuild.qa.url if build-artifacts/release-build.properties
             does not exist.  If that file *does* exist, we'll read it
             and set the three properties from properties found there. -->
        <property file="tests.properties" prefix="autobuild.qa." />
        <property file="build-artifacts/release-build.properties" />

        <property name="autobuild.qa.url" value="${release.update-site}" />
        <property name="autobuild.qa.code" value="${release.code}" />
        <property name="autobuild.qa.test" value="${release.test}" />

        <!-- download the code and test features identified -->
        <!-- first make sure we have a place to put things -->
        <mkdir dir="${autobuild.dir.output.candidates}" />
        <mkdir dir="${autobuild.dir.output.release}/features" />
        <mkdir dir="${autobuild.dir.output.release}/plugins" />

        <targets id="autobuild.qa.install-targets">
            <target feature="${feature}" version="${autobuild.qa.code}" />
            <target feature="${feature}.test" version="${autobuild.qa.test}" />
        </targets>
        <install.targets
            refid="autobuild.qa.install-targets"
            dir="${autobuild.dir.output.release}"
            localsitecache="${autobuild.workspace.local-cache}"
            caching="${autobuild.workspace.cache-choice}">

            <updatesites id="autobuild.qa.test-prep">
                <updatesite url="${autobuild.qa.url}" />
            </updatesites>
        </install.targets>

        <!-- create final directories that we need. -->
        <mkdir dir="${autobuild.dir.output.logs}" />
        <mkdir dir="${autobuild.dir.output.test-results}" />

        <!-- generate the test script -->
        <tempfile property="_testscripts.temp.file" />
        <echoproperties destfile="${_testscripts.temp.file}"/>
        <autobuild.antrunner buildFile="${autobuild.dir.scripts}/private/testscripts.xml"
                             propertyFile="${_testscripts.temp.file}" />
        <delete file="${_testscripts.temp.file}" quiet="true" />
    </target>

   
    <import file="${autobuild.dir.scripts}/private/release-props.xml" />
    <import file="${autobuild.dir.scripts}/private/autobuild-private.xml" />
    <import file="${autobuild.dir.scripts}/private/isset.xml" />
    <import file="${autobuild.dir.scripts}/private/pdms-build-target.xml" />


</project>
